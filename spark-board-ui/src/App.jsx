import React, { useMemo, useCallback } from 'react';
import ReactFlow, { useNodesState, useEdgesState, addEdge, MiniMap, Controls } from 'reactflow';

import TransformationNode from './transformation';
import SideBar from './sidebar';

import 'reactflow/dist/style.css';
import './transformation.css';
import './App.css'

export default function App() {
  // model_initialNodes and model_initialEdges are defined in model.js, which is
  // included in the index.html file because this file will be generated by
  // spark_board while processing the data frame.
  // For development purposes, we also added a model.js file here in order to
  // be able to compile and execute the project.
  const [nodes, setNodes, onNodesChange] = useNodesState(model_initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(model_initialEdges);

  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);

  // register the transformation node type into react-flow
  const nodeTypes = useMemo(() => ({ transformation: TransformationNode }), []);

  const [selectedNode, setSelectedNode] = React.useState(model_initialNodes[0]);

  return (
    <div className="app_container" style={{ width: '100vw', height: '100vh' }}>
      <SideBar width="400px" node={selectedNode} />
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        fitView
        nodeTypes={nodeTypes}
        onNodeClick={(event, node) => setSelectedNode(node)}
      >
        <Controls />
        <MiniMap zoomable pannable/>
      </ReactFlow>
    </div>
  );
}