import React, { useMemo, useCallback, useEffect } from 'react';
import ReactFlow, { useNodesState, useEdgesState, addEdge, MiniMap, Controls } from 'reactflow';

import TransformationNode from './transformation';
import ColumnNode from './column';
import SideBar from './sidebar';

import 'reactflow/dist/style.css';
import './transformation.css';
import './App.css'

export default function App() {
  // model_initialNodes and model_initialEdges are defined in model.js, which is
  // included in the index.html file because this file will be generated by
  // spark_board while processing the data frame.
  // For development purposes, we also added a model.js file here in order to
  // be able to compile and execute the project.
  const [nodes, setNodes, onNodesChange] = useNodesState(model_initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(model_initialEdges);

  const [selectedNode, setSelectedNode] = React.useState(model_initialNodes[0]);
  const [selectedColumn, setSelectedColumn] = React.useState(undefined);
  const [columnTracking, setColumnTracking] = React.useState([]);

  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);
  const onNodeClick = useCallback((event, node) => {
    if (node.type == "transformation") {
      console.log(node);
      console.log(event);
      setSelectedNode(node);
      setSelectedColumn(undefined);
      setColumnTracking([]);
    }
  }, [setSelectedNode]);

  // register the transformation node type into react-flow
  const nodeTypes = useMemo(() => ({
    transformation: TransformationNode,
    column: ColumnNode
  }), []);

  useEffect(() => {
    setNodes((nds) =>
      nds.map((node) => {
        if (node.type == "transformation") {
          if (node.id === selectedNode.id) {
            node.style = { ...node.style, fontWeight: "bold" };
            node.data.selectedColumn = selectedColumn;
          } else {
            node.style = { ...node.style, fontWeight: "normal" };
            node.data.selectedColumn = undefined;
          }
        } else {
          if (node.id === selectedColumn) {
            console.log("On selected column, node is:", node);
            node.style = { ...node.style };
            node.data.hidden = false;
          } else {
            node.style = { ...node.style };
            node.data.hidden = true;
          }
        }

        return node;
      })
    );
  }, [selectedNode, selectedColumn]);

  return (
    <div className="app_container" style={{ width: '100vw', height: '100vh' }}>
      <SideBar width="400px" node={selectedNode} selectedColumn={selectedColumn} onSelectedColumnChange={(column) => {
        setSelectedColumn(column.id);
        console.log(column);
      }} />
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        fitView
        nodeTypes={nodeTypes}
        onNodeClick={onNodeClick}
        hidden={false}
      >
        <Controls />
        <MiniMap zoomable pannable/>
      </ReactFlow>
    </div>
  );
}